/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serialize(root, sb);
        // System.out.println("sb= "  + sb.toString());
        return sb.toString();
    }
    
    private void serialize(TreeNode root, StringBuilder sb) {
        if (root == null) return;
        sb.append(root.val).append("#");
        serialize(root.left, sb);
        serialize(root.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data == null || data.length() == 0) return null;
        return deserialize(new LinkedList<String>(Arrays.asList(data.split("#"))), Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    // 2#1#3# -> [2, 1, 3]
    // 2
    private TreeNode deserialize(Queue<String> queue, int lo, int hi) {
        if (queue.isEmpty()) return null;
        int val = Integer.valueOf(queue.peek());
        if (val < lo || val > hi) return null;
        // System.out.println("curr val= " + val);
        queue.poll();
        TreeNode root = new TreeNode(val);
        root.left = deserialize(queue, lo, val);
        root.right = deserialize(queue, val, hi);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// String tree = ser.serialize(root);
// TreeNode ans = deser.deserialize(tree);
// return ans;



// serialize and deserialize Binary Tree
class BT {
   public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serializeBT(root, new StringBuilder());
        return sb.toString();
    }
    
    private void serializeBT(TreeNode root, StringBuilder sb) {
        if (root == null) {
            sb.append("#").append("*");
            return;
        }
        sb.append(root.val).append("*");
        serializeBT(root.left, sb);
        serializeBT(root.right, sb);
    }
    
    public TreeNode deserializeBT(String data) {
        if (data == null || data.length() == 0) return null;
        return deserializeBT(new LinkedList(Arrays.asList(data.split("*"))));
    }
    
    private deserializeBT(Queue<String> queue) {
        String val = queue.poll();
        // null node
        if ("#".equals(val)) return null;
        TreeNode root = new TreeNode(Integer.valueOf(val));
        root.left = deserializeBT(queue);
        root.right = deserializeBT(queue);
        return root;
    }
}
